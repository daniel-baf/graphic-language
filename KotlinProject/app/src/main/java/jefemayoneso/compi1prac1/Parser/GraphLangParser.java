
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package jefemayoneso.compi1prac1.Parser;

import java_cup.runtime.*;
import jefemayoneso.compi1prac1.Lexer.GraphLangLexer;
import jefemayoneso.compi1prac1.Backend.ParserActions.ParserActioner;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphLangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphLangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphLangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphLangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\031\004\000\002\031\003\000\002\032\007\000" +
    "\002\030\007\000\002\030\007\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\005" +
    "\006\000\002\006\010\000\002\007\010\000\002\010\010" +
    "\000\002\011\006\000\002\011\006\000\002\012\010\000" +
    "\002\013\010\000\002\014\006\000\002\014\006\000\002" +
    "\015\006\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\007\000\002\023\003\000\002\023\005\000" +
    "\002\023\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\022\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\003\005\021\006\001\002\000\004\002" +
    "\167\001\002\000\010\002\ufffc\021\ufffc\040\ufffc\001\002" +
    "\000\006\022\023\023\022\001\002\000\010\002\ufffd\021" +
    "\ufffd\040\ufffd\001\002\000\010\002\uffff\021\006\040\013" +
    "\001\002\000\006\002\ufffa\040\ufffa\001\002\000\006\002" +
    "\000\040\013\001\002\000\004\017\015\001\002\000\010" +
    "\002\ufffe\021\ufffe\040\ufffe\001\002\000\004\041\016\001" +
    "\002\000\004\020\017\001\002\000\004\006\020\001\002" +
    "\000\006\002\ufff9\040\ufff9\001\002\000\006\002\ufffb\040" +
    "\ufffb\001\002\000\004\007\116\001\002\000\004\007\024" +
    "\001\002\000\014\003\037\024\035\025\034\026\032\027" +
    "\030\001\002\000\014\010\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\001\002\000\014\010\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\001\002\000\014\010\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\001\002\000\004\005\072\001\002\000" +
    "\014\010\071\024\035\025\034\026\032\027\030\001\002" +
    "\000\004\005\060\001\002\000\014\010\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\001\002\000\004\005\043\001\002" +
    "\000\004\005\040\001\002\000\014\010\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\001\002\000\014\010\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\001\002\000\004\041\041\001" +
    "\002\000\004\006\042\001\002\000\026\010\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\001\002\000\004\011\044\001\002\000\004" +
    "\007\047\001\002\000\006\004\uffd5\012\uffd5\001\002\000" +
    "\006\004\054\012\055\001\002\000\004\042\050\001\002" +
    "\000\004\004\051\001\002\000\004\042\052\001\002\000" +
    "\004\010\053\001\002\000\006\004\uffd4\012\uffd4\001\002" +
    "\000\004\007\047\001\002\000\004\006\056\001\002\000" +
    "\026\010\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\001\002\000\006\004" +
    "\uffd6\012\uffd6\001\002\000\004\011\061\001\002\000\004" +
    "\041\062\001\002\000\006\004\uffda\012\uffda\001\002\000" +
    "\006\004\064\012\065\001\002\000\004\041\067\001\002" +
    "\000\004\006\066\001\002\000\014\010\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\001\002\000\006\004\uffd9\012\uffd9" +
    "\001\002\000\014\010\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\001\002\000\010\002\ufff8\021\ufff8\040\ufff8\001\002" +
    "\000\004\011\073\001\002\000\010\017\077\042\076\043" +
    "\075\001\002\000\006\004\112\012\113\001\002\000\020" +
    "\004\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\001\002\000\020\004\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\020\uffcc\001\002\000\010\017\077\042" +
    "\076\043\075\001\002\000\016\004\uffd8\012\uffd8\013\105" +
    "\014\102\015\103\016\104\001\002\000\020\004\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\001\002" +
    "\000\010\017\uffcf\042\uffcf\043\uffcf\001\002\000\010\017" +
    "\uffce\042\uffce\043\uffce\001\002\000\010\017\uffcd\042\uffcd" +
    "\043\uffcd\001\002\000\010\017\uffd0\042\uffd0\043\uffd0\001" +
    "\002\000\010\017\077\042\076\043\075\001\002\000\020" +
    "\004\uffd1\012\uffd1\013\105\014\102\015\103\016\104\020" +
    "\uffd1\001\002\000\014\013\105\014\102\015\103\016\104" +
    "\020\111\001\002\000\020\004\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\001\002\000\010\017\077" +
    "\042\076\043\075\001\002\000\004\006\114\001\002\000" +
    "\014\010\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\001\002" +
    "\000\016\004\uffd7\012\uffd7\013\105\014\102\015\103\016" +
    "\104\001\002\000\022\003\130\024\035\025\034\030\122" +
    "\031\126\032\132\033\124\034\134\001\002\000\022\010" +
    "\uffe6\024\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\001\002\000\022\010\uffe9\024\uffe9\025\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\001\002\000\022" +
    "\010\uffe7\024\uffe7\025\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\001\002\000\004\005\162\001\002\000\022" +
    "\010\uffec\024\uffec\025\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\001\002\000\004\005\155\001\002\000\022" +
    "\010\uffef\024\uffef\025\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\001\002\000\004\005\150\001\002\000\022" +
    "\010\147\024\035\025\034\030\122\031\126\032\132\033" +
    "\124\034\134\001\002\000\022\010\uffed\024\uffed\025\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\001\002\000" +
    "\022\010\uffeb\024\uffeb\025\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\001\002\000\004\005\141\001\002\000" +
    "\022\010\uffea\024\uffea\025\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\001\002\000\004\005\136\001\002\000" +
    "\022\010\uffe8\024\uffe8\025\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\001\002\000\004\041\137\001\002\000" +
    "\004\006\140\001\002\000\022\010\uffdb\024\uffdb\025\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\001\002\000" +
    "\004\011\142\001\002\000\010\017\077\042\076\043\075" +
    "\001\002\000\006\004\112\012\144\001\002\000\004\006" +
    "\145\001\002\000\022\010\uffde\024\uffde\025\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\001\002\000\022\010" +
    "\uffee\024\uffee\025\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\001\002\000\010\002\ufff7\021\ufff7\040\ufff7\001" +
    "\002\000\004\011\151\001\002\000\004\041\062\001\002" +
    "\000\006\004\064\012\153\001\002\000\004\006\154\001" +
    "\002\000\022\010\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\001\002\000\006\042\157\043" +
    "\156\001\002\000\004\006\161\001\002\000\004\006\160" +
    "\001\002\000\022\010\uffdd\024\uffdd\025\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\001\002\000\022\010\uffdc" +
    "\024\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\001\002\000\006\035\163\036\164\001\002\000\004" +
    "\006\166\001\002\000\004\006\165\001\002\000\022\010" +
    "\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\001\002\000\022\010\uffe1\024\uffe1\025\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\010\002\003\027\007\030\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\013\031\011\032\010\001\001\000" +
    "\002\001\001\000\004\032\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\030\005\026\006" +
    "\035\007\032\010\024\025\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\026\006\035\007\032\010\024\025\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\045\021\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\073\022\100\023\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\100\023\107\001" +
    "\001\000\004\024\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\100\023\106\001\001\000\004\024\105" +
    "\001\001\000\004\024\105\001\001\000\002\001\001\000" +
    "\006\022\100\023\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\105\001\001\000\024\004\126\005" +
    "\122\010\120\011\130\012\132\013\117\014\134\015\116" +
    "\026\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\122\010\120\011\130\012\132\013\117\014\134\015\116" +
    "\026\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\142\022\100\023\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphLangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphLangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphLangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // for actions
    private ParserActioner actioner = new ParserActioner();

    /* CONSTRUCTOR */
    public GraphLangParser(GraphLangLexer lexer) {
        super(lexer);
    }

    public ParserActioner getActioner() {
        return this.actioner;
    }

    /* ERRORS METHOD */
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        if(cur_token.sym == sym.EOF) {
            // TODO what to do when file ends
            System.out.println("File read eneded");
        } else {
            System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
            System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            // TODO add what to do in case of EOF
        }
    }

    public void addMathSymReport(Symbol cur_token) {
        System.out.println("CurTkn: " + sym.terminalNames[cur_token.sym] + " L:" + sym.terminalNames[cur_token.left] + " R:" + sym.terminalNames[cur_token.right]);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphLangParser$actions {
  private final GraphLangParser parser;

  /** Constructor */
  CUP$GraphLangParser$actions(GraphLangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraphLangParser$do_action_part00000000(
    int                        CUP$GraphLangParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphLangParser$parser,
    java.util.Stack            CUP$GraphLangParser$stack,
    int                        CUP$GraphLangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphLangParser$result;

      /* select the action based on the action number */
      switch (CUP$GraphLangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		RESULT = start_val;
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphLangParser$parser.done_parsing();
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= def_graph_section exec_graph_section 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= def_graph_section 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_graph_section ::= def_graph_section def_graph 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("def_graph_section",21, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_graph_section ::= def_graph 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("def_graph_section",21, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_graph_section ::= error 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("def_graph_section",21, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exec_graph_section ::= exec_graph_section exec_graph 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("exec_graph_section",23, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exec_graph_section ::= exec_graph 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("exec_graph_section",23, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exec_graph ::= EXECUTE_ACT OPEN_PARENTHESIS VAL_ON_COMILLAS CLOSE_PARENTHESIS SEMI_COLON 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("exec_graph",24, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_graph ::= DEF GRAPH_BAR OPEN_BRACES bar_dec CLOSE_BRACES 
            {
              Object RESULT =null;
		 actioner.saveBarGraphData(); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("def_graph",22, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_graph ::= DEF GRAPH_PIE OPEN_BRACES pie_dec CLOSE_BRACES 
            {
              Object RESULT =null;
		 actioner.savePieGraphData(); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("def_graph",22, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bar_dec ::= bar_dec bar_dec_sub 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec",1, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bar_dec ::= bar_dec_sub 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec",1, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bar_dec ::= error 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec",1, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bar_dec_sub ::= title_dec 
            {
              Object RESULT =null;
		int valTitleleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valTitleright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object valTitle = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 actioner.registTitleDeclaration(cur_token.left,cur_token.right,valTitle.toString(), 0); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec_sub",19, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bar_dec_sub ::= x_ax_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec_sub",19, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bar_dec_sub ::= y_ax_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec_sub",19, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bar_dec_sub ::= merge_dec 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 actioner.registMergeDeclaration(cur_token.left, cur_token.right, (ArrayList<short[]>)tmp, 0); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("bar_dec_sub",19, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pie_dec ::= pie_dec_sub 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec",2, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pie_dec ::= pie_dec pie_dec_sub 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec",2, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pie_dec ::= error 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec",2, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pie_dec_sub ::= title_dec 
            {
              Object RESULT =null;
		int valTitleleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valTitleright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object valTitle = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 actioner.registTitleDeclaration(cur_token.left,cur_token.right,valTitle.toString(), 1); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pie_dec_sub ::= type_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pie_dec_sub ::= tags_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pie_dec_sub ::= vals_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pie_dec_sub ::= total_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pie_dec_sub ::= merge_dec 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 actioner.registMergeDeclaration(cur_token.left, cur_token.right, (ArrayList<short[]>)tmp, 1); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pie_dec_sub ::= extra_dec 
            {
              Object RESULT =null;

              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("pie_dec_sub",20, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // title_dec ::= TITLE_ATTR COLON VAL_ON_COMILLAS SEMI_COLON 
            {
              Object RESULT =null;
		int valTitleleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int valTitleright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object valTitle = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 RESULT = valTitle.toString(); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("title_dec",3, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // x_ax_dec ::= X_AXIS_ATTR COLON OPEN_BRACKETS mult_comillas CLOSE_BRACKETS SEMI_COLON 
            {
              Object RESULT =null;
		int xAxValsleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int xAxValsright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object xAxVals = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		 actioner.registXAxisDeclaration(cur_token.left, cur_token.right, xAxVals.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("x_ax_dec",4, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // y_ax_dec ::= Y_AXIS_ATTR COLON OPEN_BRACKETS mult_nums CLOSE_BRACKETS SEMI_COLON 
            {
              Object RESULT =null;
		int yAxValsleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int yAxValsright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object yAxVals = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		 actioner.registYAxisDeclaration(cur_token.left, cur_token.right, yAxVals.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("y_ax_dec",5, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // merge_dec ::= MERGE_ATTR COLON OPEN_BRACKETS mult_braces CLOSE_BRACKETS SEMI_COLON 
            {
              Object RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object items = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		 RESULT = (ArrayList<short[]>)items; 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("merge_dec",6, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_dec ::= TYPE_ATTR COLON TYPE_CUANT_ATTR SEMI_COLON 
            {
              Object RESULT =null;
		 actioner.registTypeDeclaration(cur_token.left, cur_token.right, 0); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_dec ::= TYPE_ATTR COLON TYPE_PERC_ATTR SEMI_COLON 
            {
              Object RESULT =null;
		 actioner.registTypeDeclaration(cur_token.left, cur_token.right, 1); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("type_dec",7, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tags_dec ::= LABEL_ATTR COLON OPEN_BRACKETS mult_comillas CLOSE_BRACKETS SEMI_COLON 
            {
              Object RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object items = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		 actioner.registTagsDeclaration(cur_token.left, cur_token.right, items.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("tags_dec",8, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vals_dec ::= VALUES_ATTR COLON OPEN_BRACKETS mult_nums CLOSE_BRACKETS SEMI_COLON 
            {
              Object RESULT =null;
		int numbersleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int numbersright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object numbers = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		 actioner.registValuesDeclaration(cur_token.left, cur_token.right, numbers.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("vals_dec",9, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // total_dec ::= TOTAL_ATTR COLON NUM_INT SEMI_COLON 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 actioner.registTotalDeclaration(cur_token.left, cur_token.right, Double.valueOf(number.toString())); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("total_dec",10, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // total_dec ::= TOTAL_ATTR COLON NUM_DEC SEMI_COLON 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 actioner.registTotalDeclaration(cur_token.left, cur_token.right, Double.valueOf(number.toString())); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("total_dec",10, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // extra_dec ::= EXTRA_ATTR COLON VAL_ON_COMILLAS SEMI_COLON 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 actioner.regisExtraDeclaration(cur_token.left, cur_token.right, val.toString().substring(1, val.toString().length() - 1)); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("extra_dec",11, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mult_comillas ::= VAL_ON_COMILLAS 
            {
              Object RESULT =null;
		int valCommleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valCommright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object valComm = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 RESULT = valComm.toString().substring(1,valComm.toString().length() - 1); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_comillas",12, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mult_comillas ::= mult_comillas COMMA VAL_ON_COMILLAS 
            {
              Object RESULT =null;
		int lastCommleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int lastCommright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object lastComm = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		int valCommleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valCommright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object valComm = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 
                                                                  String item = valComm.toString().substring(1,valComm.toString().length() - 1); // remove comillas
                                                                  String items = item + "\n" + lastComm;
                                                                  RESULT = items;
                                                               
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_comillas",12, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mult_nums ::= arithm 
            {
              Object RESULT =null;
		int arithValleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int arithValright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object arithVal = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 RESULT = Double.valueOf(arithVal.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_nums",13, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mult_nums ::= mult_nums COMMA arithm 
            {
              Object RESULT =null;
		int lastValleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int lastValright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object lastVal = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		int arithValleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int arithValright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object arithVal = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		
                                                                 String item = arithVal.toString();
                                                                 String items = item + "\n" + lastVal;
                                                                 RESULT = items; 
                                                              
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_nums",13, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mult_braces ::= mult_braces COMMA brace_conj 
            {
              Object RESULT =null;
		int lastValleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int lastValright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object lastVal = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		
                                                            ArrayList<short[]> valActual = (ArrayList<short[]>) val;
                                                            ArrayList<short[]> values = new ArrayList<>(); // tmp
                                                            // recover data
                                                            values.addAll(valActual);
                                                            values.addAll((ArrayList<short[]>) lastVal);
                                                            RESULT = values;
                                                        
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_braces",14, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mult_braces ::= brace_conj 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 RESULT =  val; 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("mult_braces",14, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // brace_conj ::= OPEN_BRACES NUM_INT COMMA NUM_INT CLOSE_BRACES 
            {
              Object RESULT =null;
		int valXleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)).left;
		int valXright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)).right;
		Object valX = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-3)).value;
		int valYleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int valYright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object valY = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 
                                                                     short[] tmp = new short[]{Short.valueOf(valX.toString()), Short.valueOf(valY.toString())}; 
                                                                     ArrayList<short[]> array = new ArrayList<>();
                                                                     array.add(tmp);
                                                                     RESULT = array;
                                                                  
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("brace_conj",15, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithm ::= digit 
            {
              Object RESULT =null;
		int valSingleleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int valSingleright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object valSingle = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 
                                                                      RESULT = Double.valueOf(valSingle.toString());
                                                                    
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm",17, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithm ::= OPEN_PARENTHESIS arithm CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		int valParenthleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int valParenthright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object valParenth = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		 RESULT= Double.valueOf(valParenth.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm",17, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithm ::= arithm arithm_sim arithm 
            {
              Object RESULT =null;
		int leftValArithmleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).left;
		int leftValArithmright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).right;
		Object leftValArithm = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)).value;
		int symTmpleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).left;
		int symTmpright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).right;
		Object symTmp = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-1)).value;
		int rightValArithmleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int rightValArithmright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object rightValArithm = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		
                                                                        Double left = Double.valueOf(leftValArithm.toString());
                                                                        Double right = Double.valueOf(rightValArithm.toString());

                                                                        switch(Integer.valueOf(symTmp.toString())) {
                                                                            case sym.ADDITION:
                                                                                RESULT = left + right;
                                                                                break;
                                                                            case sym.SUBSTRACTION:
                                                                                RESULT = left - right;
                                                                                break;
                                                                            case sym.DIVISION:
                                                                                RESULT = left / right;
                                                                                break;
                                                                            case sym.MULTIPLICATION:
                                                                                RESULT = left *  right;
                                                                                break;
                                                                            default:
                                                                                System.out.println("error");
                                                                        }
                                                                    
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm",17, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.elementAt(CUP$GraphLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithm_sim ::= ADDITION 
            {
              Object RESULT =null;
		 RESULT = sym.ADDITION; addMathSymReport(cur_token); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm_sim",18, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithm_sim ::= SUBSTRACTION 
            {
              Object RESULT =null;
		 RESULT = sym.SUBSTRACTION; addMathSymReport(cur_token); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm_sim",18, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithm_sim ::= MULTIPLICATION 
            {
              Object RESULT =null;
		 RESULT = sym.MULTIPLICATION; addMathSymReport(cur_token); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm_sim",18, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithm_sim ::= DIVISION 
            {
              Object RESULT =null;
		 RESULT = sym.DIVISION; addMathSymReport(cur_token);
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("arithm_sim",18, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // digit ::= NUM_INT 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 RESULT = Integer.valueOf(numInt.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("digit",16, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // digit ::= NUM_DEC 
            {
              Object RESULT =null;
		int numDecleft = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).left;
		int numDecright = ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()).right;
		Object numDec = (Object)((java_cup.runtime.Symbol) CUP$GraphLangParser$stack.peek()).value;
		 RESULT = Double.valueOf(numDec.toString()); 
              CUP$GraphLangParser$result = parser.getSymbolFactory().newSymbol("digit",16, ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphLangParser$stack.peek()), RESULT);
            }
          return CUP$GraphLangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphLangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraphLangParser$do_action(
    int                        CUP$GraphLangParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphLangParser$parser,
    java.util.Stack            CUP$GraphLangParser$stack,
    int                        CUP$GraphLangParser$top)
    throws java.lang.Exception
    {
              return CUP$GraphLangParser$do_action_part00000000(
                               CUP$GraphLangParser$act_num,
                               CUP$GraphLangParser$parser,
                               CUP$GraphLangParser$stack,
                               CUP$GraphLangParser$top);
    }
}

}
